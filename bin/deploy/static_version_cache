# -*- cperl -*-
# vim: ts=8:sw=2:expandtab
eval 'exec $CBROOT/bin/perl $0 ${1+"$@"}'
  if $running_under_some_shell;
use strict;
use warnings;
use DBI ();
use Storable qw(nstore);
use JSON::XS qw(encode_json);
use Cwd;

use Combust::Config;
use Combust::StaticFiles;

my $static = Combust::StaticFiles->new(setup => 1);

my $config = Combust::Config->new;

my $root = $ENV{CBROOTLOCAL};
my $root_dir = $config->root_docs;

my @sites = $config->sites_list;

my %paths_done;

for my $site (@sites) {

    my $dir = $static->find_static_path($site);
    next unless $dir;
    next if $paths_done{$dir}++;

    my $storable_file = "$dir/.static.versions.store";
    my $json_file     = "$dir/.static.versions.json";
    if (! -w $json_file) {
        warn "$json_file not writable, skipping\n";
        continue;
    }

    chdir $dir or die "could not chdir to $dir";

    my $files = {};
    
    if (-d "$root/.svn") {
        my $svn = `svn info -R`;
        my @files =  map { +{ map { chomp; split /: /, $_, 2 } split /\n/ } } split /\n\n/, $svn;
        for my $file (@files) {
            $files->{ "/" . $file->{Path} } = $file->{"Last Changed Rev"};
        }
    }
    elsif (-d "$root/.git") { 
        $files = get_git_tree($root, $dir);
    }
    else { 
        my $deployment_mode =  $config->site->{$site}->{deployment_mode} || 'test';
        warn "Could not find .svn or .git directory\n" if $deployment_mode eq 'devel';
        exit;
    }

    my $extra = $static->_load_json('.static.versions.extra.json') if -e '.static.versions.extra.json';
    $files = { %$files, %$extra } if $extra;
    #print Data::Dumper->Dump([\$files], [qw(files)]);

    for my $k (keys %$files) {
        my $version = $files->{$k} || 0;
        my $server = DBI::hash("$k/$version", 1) + 0;
        my $server_short = ($server % 2) + 1;
        my $attr = { server     => $server_short,
                     server_num => $server % 100,
                   };
        if ($k =~ m/(?<!-min)\.(css|js)/) {
            my $min = $k;
            $min =~ s/(\.[^\.]+)$/-min$1/;
            if (-f "$dir/$min") {
                $attr->{min} = 1;
            }
        }
        
        $files->{$k} = [ $version, $attr ];
    }

    nstore($files, $storable_file) or die "could not store $storable_file: $!";
    $static->_save_json($json_file, $files);
}

sub get_git_tree {
    my ($root, $dir) = @_;

    my $old_dir = getcwd();
    chdir("$root/$dir");

    my $command = "git ls-tree --abbrev -r HEAD $dir";
    my $git = `$command`;
    my @submodules;

    my $files = { map { chomp; my ($type, $version, $file) = (split /\s/, $_)[1,2,3];
                     push @submodules, $file if $type eq 'commit';
                     ("/$file" => $version);
                     } split /\n/, $git 
             };

    for my $submodule (@submodules) {
        my $sub = get_git_tree($submodule, '.');
        $sub = { map { ("/$submodule$_" => $sub->{$_}) } keys %$sub };
        $files = { %$files, %$sub };
    }

    chdir ($old_dir);
    return $files;
}

1;
